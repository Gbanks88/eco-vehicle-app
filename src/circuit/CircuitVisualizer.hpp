#pragma once

#include "CircuitAnalyzer.hpp"
#include <vector>
#include <string>
#include <sstream>
#include <fstream>
#include <iomanip>
#include <cmath>

namespace circuit {

class CircuitVisualizer {
public:
    CircuitVisualizer(const CircuitAnalyzer& analyzer) 
        : analyzer_(analyzer) {}

    void generatePlot(const std::string& filename, 
                     const std::vector<double>& x_data,
                     const std::vector<Complex>& y_data,
                     const std::string& x_label,
                     const std::string& y_label,
                     const std::string& title) {
        std::ofstream file(filename);
        file << "set terminal png enhanced\n";
        file << "set output '" << filename << ".png'\n";
        file << "set title '" << title << "'\n";
        file << "set xlabel '" << x_label << "'\n";
        file << "set ylabel '" << y_label << "'\n";
        file << "set grid\n";
        
        // Write data to temporary file
        std::string data_file = filename + ".dat";
        std::ofstream data(data_file);
        for (size_t i = 0; i < x_data.size(); i++) {
            data << x_data[i] << " " 
                 << std::abs(y_data[i]) << " "
                 << std::arg(y_data[i]) * 180.0 / M_PI << "\n";
        }
        data.close();
        
        // Plot magnitude and phase
        file << "set multiplot layout 2,1\n";
        file << "plot '" << data_file << "' using 1:2 with lines title 'Magnitude'\n";
        file << "plot '" << data_file << "' using 1:3 with lines title 'Phase'\n";
        file.close();
    }

    void generateBodePlot(const std::string& filename,
                         const std::map<double, std::vector<Complex>>& freq_response,
                         size_t node_index) {
        std::vector<double> frequencies;
        std::vector<Complex> response;
        
        for (const auto& [freq, voltages] : freq_response) {
            frequencies.push_back(freq);
            response.push_back(voltages[node_index]);
        }
        
        // Convert to dB
        std::vector<Complex> db_response;
        for (const auto& v : response) {
            double mag_db = 20 * std::log10(std::abs(v));
            double phase_deg = std::arg(v) * 180.0 / M_PI;
            db_response.push_back(Complex(mag_db, phase_deg));
        }
        
        generatePlot(filename + "_bode",
                    frequencies,
                    db_response,
                    "Frequency (Hz)",
                    "Magnitude (dB) / Phase (deg)",
                    "Bode Plot - Node " + std::to_string(node_index));
    }

    void generateTransientPlot(const std::string& filename,
                             const std::vector<double>& time_points,
                             const std::vector<std::vector<Complex>>& node_voltages) {
        for (size_t node = 0; node < node_voltages[0].size(); node++) {
            std::vector<Complex> node_response;
            for (const auto& voltages : node_voltages) {
                node_response.push_back(voltages[node]);
            }
            
            generatePlot(filename + "_node" + std::to_string(node),
                        time_points,
                        node_response,
                        "Time (s)",
                        "Voltage (V)",
                        "Transient Response - Node " + std::to_string(node));
        }
    }

    void generateNetlist(const std::string& filename) {
        std::ofstream file(filename);
        file << "* Circuit Netlist\n";
        file << "* Generated by CircuitVisualizer\n\n";
        
        const auto& components = analyzer_.getComponents();
        for (const auto& component : components) {
            file << component->getName() << " ";
            for (const auto& pin : component->getPins()) {
                file << pin->getNode()->getName() << " ";
            }
            file << component->getType() << " ";
            
            // Write component parameters
            const auto& params = component->getParameters();
            for (const auto& [name, value] : params) {
                file << name << "=" << value << " ";
            }
            file << "\n";
        }
        
        file.close();
    }

    void generateSchematic(const std::string& filename) {
        std::ofstream file(filename);
        file << "\\documentclass{standalone}\n";
        file << "\\usepackage{circuitikz}\n";
        file << "\\begin{document}\n";
        file << "\\begin{circuitikz}\n";
        
        // Place components
        const auto& components = analyzer_.getComponents();
        double x = 0, y = 0;
        for (const auto& component : components) {
            switch (component->getType()) {
                case ComponentType::RESISTOR:
                    file << "\\draw (" << x << "," << y << ") to[R=" 
                         << component->getName() << "] +" 
                         << "(2,0);\n";
                    break;
                case ComponentType::CAPACITOR:
                    file << "\\draw (" << x << "," << y << ") to[C=" 
                         << component->getName() << "] +" 
                         << "(2,0);\n";
                    break;
                case ComponentType::INDUCTOR:
                    file << "\\draw (" << x << "," << y << ") to[L=" 
                         << component->getName() << "] +" 
                         << "(2,0);\n";
                    break;
                case ComponentType::VOLTAGE_SOURCE:
                    file << "\\draw (" << x << "," << y << ") to[V=" 
                         << component->getName() << "] +" 
                         << "(2,0);\n";
                    break;
                default:
                    break;
            }
            x += 3;
            if (x > 15) { x = 0; y -= 3; }
        }
        
        file << "\\end{circuitikz}\n";
        file << "\\end{document}\n";
        file.close();
    }

private:
    const CircuitAnalyzer& analyzer_;
};

} // namespace circuit
